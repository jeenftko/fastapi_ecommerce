fastapi_ecommerce_Небольшой интернет магазин, который имеет несколько модулей, таких как функции входа в систему, категории товаров и возможность оставления отзыва для товара.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. В корне нашего проекта/виртуальной среды мы создали папку app, где будет находиться наше приложение (main.py).
2. Также мы создали папку routers,  в которую поместили 2 файла: category.py и products.py. Эти файлы будут отвечать за маршрутизацию категорий товара и продуктов создавая необходимые конечные точки нашего API.
3. Также у нас существует несколько файлов __init__.py (app; routers).
4. Чтобы вывести маршруты, вне главного файла приложения, необходимо воспользоваться экземпляром класса APIRouter (category.py).
5.***Прописать в терминале команды $ pip install fastapi $ pip install "uvicorn[standard]"
6. Для запуска сервера в терминале $ python -m uvicorn app.main:app --port 8000 --reload
7. По адресу http://127.0.0.1:8000/docs проверяем работу нашего сервера.
8. Необходимо убедиться что наши маршруты для категорий и продуктов успешно были добавлены, и при этом сгруппированы в документации, так как мы используем tags=['category']; tags=['products'].
9. Для создание моделей интернет магазина используем Pydantic (app/schemas.py).
10. Создание БД. Необходимо утсановить SQLAlchemy $ pip install SQLAlchemy.
11. Создадали папку backend и файл db.py. 
Для хранения модели SQLAlchemy категорий и продуктов создаем папку models(category.py; products.py).
12. Для создания миграции БД и созранности целостности данных и гибкости в разработки, установим Alembic -> $ pip install alembic.
13. Чтобы создать среду миграции, необходимо запустить команду, чтобы создать среду миграции в каталоге app/migrations/ -> $ python -m alembic init app/migrations
14. Для настройки способа передачи сессии при запросах к БД в папке app/backend создали файл db_depends.py
15. Для создания категории, необходимо доработать файл category в папке routers:
-импортируем необходимые модули, в функции создания записи;
-подключаем зависимость сессии БД и получаем нашу модель из POST запроса;
-после добавления, для подтверждения изменений у объекта Session вызывается метод commit();
-для получения поля slug динамически, используем библиотеку Slugify -> $ pip install python-slugify
16. Запускаем проект командой $ uvicorn app.main:app --reload и проверим работу (через POST запрос и смотрим нашу БД).
17. Для установки драйверов БД, совместимых с asyncio необходимо прописать команду $ pip install asyncpg
18. Для работы с асинхронным драйвером, который будет использовать асинхронные запросы, нам необходимо удалить файл alembic.ini и всю папку migrations.
19. Чтобы создать среду миграции в каталоге app/migrations/-> $ alembic init -t async app/migrations
20. Необходимо изменить настройки в файле alembic.ini, чтобы Alembic мог работать с нашей БД PostgreSQL. Нам нужно изменить опцию sqlalchemy.url -> sqlalchemy.url = postgresql+asyncpg://ecommerce:xxxxxx@localhost:5432/ecommerce (пароль xxxxxx в данной строке необходимо заменить на тот, что использовали при создании пользователя БД).
21. Необходимо открыть файл env.py в папке migrations. Заменить строчку кода target_metadata = None -> from app.backend.db import Base
from app.models import category, products
target_metadata = Base.metadata.
22. Теперь выполнить миграции $ alembic revision --autogenerate -m "Initial migration"
23. $ alembic upgrade head
________________________________________________________________________________________
24. Для создания аутентификации необходимо создать файл models/user.py в котором будет храниться модель пользователей.
25.Далее необходимо выполнить миграции для отображения изменений в БД. После внесения изменений в файл migrations/env.py -> $ alembic revision --autogenerate -m "Create User model" -> $ alembic upgrade head
26. Далее создаем Pydantic схему для создания пользователей (schemas.py).
27. Необходимо установить зависимости $ pip install passlib -> $ pip install bcrypt==4.0.1
28. Приступаем к реализации конечной точки, для этого создадим файл auth.py в папке routers.
29. Подключаем в главном файле проекта main.py наш API Router.
30. Поскольку аутентификация OAuth2 невозможна без процедуры обработки формы, нам необходимо установить модуль python-multipart -> $ pip install python-multipart
31. $ python -c "import secrets; print(secrets.token_hex(32))" (50a929ea9e25d8eeca854fe8234328d3ce14b92dec1e04205fcbc3f1526b5acf) -> pip install PyJWT
32. В папке routers создадим файл permission.py (будет использоваться администратором).











